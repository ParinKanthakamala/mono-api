@inject ILocalStorageService localStorage
@page "/example/jwt"
@using JWT
@using JWT.Algorithms
@using JWT.Exceptions
@using JWT.Serializers
@using Blazored.LocalStorage
@using IJsonSerializer = JWT.IJsonSerializer
<h3>Jwt</h3>


@code {
    private readonly string secret = "GQDstcKsx0NHjPOuXOYg5MbeJ1XT0uFiwDVvVBrk";
    private string token { get; set; }
    private string json { get; set; }

    protected override async void OnInitialized()
    {
        setter();
        await localStorage.SetItemAsync("jwt", token);
    }


    public void setter()
    {
        var payload = new Dictionary<string, object>
        {
            { "claim1", 0 },
            { "claim2", "claim2-value" }
        };

        IJwtAlgorithm algorithm = new HMACSHA256Algorithm(); // symmetric
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);

        token = encoder.Encode(payload, secret);
        Console.WriteLine(token);
    }

    public void getter()
    {
        try
        {
            IJsonSerializer serializer = new JsonNetSerializer();
            var provider = new UtcDateTimeProvider();
            IJwtValidator validator = new JwtValidator(serializer, provider);
            IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
            IJwtAlgorithm algorithm = new HMACSHA256Algorithm(); // symmetric
            IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
            json = decoder.Decode(token, secret, true);
        }
        catch (TokenExpiredException)
        {
            Console.WriteLine("Token has expired");
        }
        catch (SignatureVerificationException)
        {
            Console.WriteLine("Token has invalid signature");
        }
    }

}